import { DomAdapter } from './dom_adapter';
export declare class Parse5DomAdapter extends DomAdapter {
    static makeCurrent(): void;
    logError(error: any): void;
    attrToPropMap: {
        'innerHtml': string;
        'readonly': string;
        'tabindex': string;
    };
    query(selector: any): void;
    querySelector(el: any, selector: string): any;
    querySelectorAll(el: any, selector: string): List<any>;
    elementMatches(node: any, selector: string, matcher?: any): boolean;
    on(el: any, evt: any, listener: any): void;
    onAndCancel(el: any, evt: any, listener: any): Function;
    dispatchEvent(el: any, evt: any): void;
    createMouseEvent(eventType: any): {
        type: any;
        defaultPrevented: boolean;
        preventDefault: () => void;
    };
    createEvent(eventType: any): {
        type: any;
        defaultPrevented: boolean;
        preventDefault: () => void;
    };
    preventDefault(evt: any): void;
    getInnerHTML(el: any): any;
    getOuterHTML(el: any): any;
    nodeName(node: any): string;
    nodeValue(node: any): string;
    type(node: any): string;
    content(node: any): any;
    firstChild(el: any): any;
    nextSibling(el: any): any;
    parentElement(el: any): any;
    childNodes(el: any): any;
    childNodesAsList(el: any): List<any>;
    clearNodes(el: any): void;
    appendChild(el: any, node: any): void;
    removeChild(el: any, node: any): void;
    remove(el: any): any;
    insertBefore(el: any, node: any): void;
    insertAllBefore(el: any, nodes: any): void;
    insertAfter(el: any, node: any): void;
    setInnerHTML(el: any, value: any): void;
    getText(el: any): any;
    setText(el: any, value: string): void;
    getValue(el: any): any;
    setValue(el: any, value: string): void;
    getChecked(el: any): any;
    setChecked(el: any, value: boolean): void;
    createTemplate(html: any): any;
    createElement(tagName: any): any;
    createTextNode(text: string): void;
    createScriptTag(attrName: string, attrValue: string): any;
    createStyleElement(css: string): any;
    createShadowRoot(el: any): any;
    getShadowRoot(el: any): any;
    getHost(el: any): any;
    getDistributedNodes(el: any): List<any>;
    clone(node: any): any;
    hasProperty(element: any, name: string): boolean;
    getElementsByClassName(element: any, name: string): List<any>;
    getElementsByTagName(element: any, name: string): List<any>;
    classList(element: any): List<string>;
    addClass(element: any, classname: string): void;
    removeClass(element: any, classname: string): void;
    hasClass(element: any, classname: string): boolean;
    _readStyleAttribute(element: any): {};
    _writeStyleAttribute(element: any, styleMap: any): void;
    setStyle(element: any, stylename: string, stylevalue: string): void;
    removeStyle(element: any, stylename: string): void;
    getStyle(element: any, stylename: string): any;
    tagName(element: any): string;
    attributeMap(element: any): Map<any, any>;
    hasAttribute(element: any, attribute: string): any;
    getAttribute(element: any, attribute: string): any;
    setAttribute(element: any, attribute: string, value: string): void;
    removeAttribute(element: any, attribute: string): void;
    templateAwareRoot(el: any): any;
    createHtmlDocument(): any;
    defaultDoc(): any;
    getBoundingClientRect(el: any): {
        left: number;
        top: number;
        width: number;
        height: number;
    };
    getTitle(): any;
    setTitle(newTitle: string): void;
    isTemplateElement(el: any): boolean;
    isTextNode(node: any): boolean;
    isCommentNode(node: any): boolean;
    isElementNode(node: any): boolean;
    hasShadowRoot(node: any): boolean;
    isShadowRoot(node: any): boolean;
    importIntoDoc(node: any): any;
    isPageRule(rule: any): boolean;
    isStyleRule(rule: any): boolean;
    isMediaRule(rule: any): boolean;
    isKeyframesRule(rule: any): boolean;
    getHref(el: any): string;
    resolveAndSetHref(el: any, baseUrl: string, href: string): void;
    _buildRules(parsedRules: any, css?: any): List<any>;
    cssToRules(css: string): List<any>;
    supportsDOMEvents(): boolean;
    supportsNativeShadowDOM(): boolean;
    getGlobalEventTarget(target: string): any;
    getHistory(): void;
    getLocation(): void;
    getUserAgent(): string;
    getData(el: any, name: string): string;
    setData(el: any, name: string, value: string): void;
    setGlobalVar(name: string, value: any): void;
}
