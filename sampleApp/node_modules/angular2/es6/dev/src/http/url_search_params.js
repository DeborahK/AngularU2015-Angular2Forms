import { StringWrapper } from 'angular2/src/facade/lang';
import { MapWrapper, ListWrapper } from 'angular2/src/facade/collection';
function paramParser(rawParams) {
    var map = MapWrapper.create();
    var params = StringWrapper.split(rawParams, '&');
    ListWrapper.forEach(params, (param) => {
        var split = StringWrapper.split(param, '=');
        var key = ListWrapper.get(split, 0);
        var val = ListWrapper.get(split, 1);
        var list = MapWrapper.get(map, key) || ListWrapper.create();
        ListWrapper.push(list, val);
        MapWrapper.set(map, key, list);
    });
    return map;
}
export class URLSearchParams {
    constructor(rawParams) {
        this.rawParams = rawParams;
        this.paramsMap = paramParser(rawParams);
    }
    has(param) { return MapWrapper.contains(this.paramsMap, param); }
    get(param) { return ListWrapper.first(MapWrapper.get(this.paramsMap, param)); }
    getAll(param) {
        return MapWrapper.get(this.paramsMap, param) || ListWrapper.create();
    }
    append(param, val) {
        var list = MapWrapper.get(this.paramsMap, param) || ListWrapper.create();
        ListWrapper.push(list, val);
        MapWrapper.set(this.paramsMap, param, list);
    }
    toString() {
        var paramsList = ListWrapper.create();
        MapWrapper.forEach(this.paramsMap, (values, k) => {
            ListWrapper.forEach(values, v => { ListWrapper.push(paramsList, k + '=' + v); });
        });
        return ListWrapper.join(paramsList, '&');
    }
    delete(param) { MapWrapper.delete(this.paramsMap, param); }
}
//# sourceMappingURL=url_search_params.js.map