import { DOM } from 'angular2/src/dom/dom_adapter';
import { isPresent, isBlank } from 'angular2/src/facade/lang';
class ContentStrategy {
    insert(nodes) { }
}
/**
 * An implementation of the content tag that is used by transcluding components.
 * It is used when the content tag is not a direct child of another component,
 * and thus does not affect redistribution.
 */
class RenderedContent extends ContentStrategy {
    constructor(contentEl) {
        super();
        this.beginScript = contentEl;
        this.nodes = [];
    }
    // Inserts the nodes in between the start and end scripts.
    // Previous content is removed.
    insert(nodes) {
        this.nodes = nodes;
        if (isBlank(this.endScript)) {
            // On first invocation, we need to create the end marker
            this.endScript = DOM.createScriptTag('type', 'ng/contentEnd');
            DOM.insertAfter(this.beginScript, this.endScript);
        }
        else {
            // On subsequent invocations, only remove all the nodes between the start end end markers
            this._removeNodes();
        }
        DOM.insertAllBefore(this.endScript, nodes);
    }
    _removeNodes() {
        for (var node = DOM.nextSibling(this.beginScript); node !== this.endScript; node = DOM.nextSibling(this.beginScript)) {
            DOM.remove(node);
        }
    }
}
/**
 * An implementation of the content tag that is used by transcluding components.
 * It is used when the content tag is a direct child of another component,
 * and thus does not get rendered but only affect the distribution of its parent component.
 */
class IntermediateContent extends ContentStrategy {
    constructor(destinationLightDom) {
        super();
        this.destinationLightDom = destinationLightDom;
        this.nodes = [];
    }
    insert(nodes) {
        this.nodes = nodes;
        this.destinationLightDom.redistribute();
    }
}
export class Content {
    constructor(contentStartElement, select) {
        this.contentStartElement = contentStartElement;
        this.select = select;
        this._strategy = null;
    }
    init(destinationLightDom) {
        this._strategy = isPresent(destinationLightDom) ? new IntermediateContent(destinationLightDom) :
            new RenderedContent(this.contentStartElement);
    }
    nodes() { return this._strategy.nodes; }
    insert(nodes) { this._strategy.insert(nodes); }
}
//# sourceMappingURL=content_tag.js.map