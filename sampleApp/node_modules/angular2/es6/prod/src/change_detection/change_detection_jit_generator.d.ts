import { DirectiveIndex } from './directive_record';
import { ProtoRecord } from './proto_record';
export declare class ChangeDetectorJITGenerator {
    typeName: string;
    changeDetectionStrategy: string;
    records: List<ProtoRecord>;
    directiveRecords: List<any>;
    _localNames: List<string>;
    _changeNames: List<string>;
    _fieldNames: List<string>;
    _pipeNames: List<string>;
    constructor(typeName: string, changeDetectionStrategy: string, records: List<ProtoRecord>, directiveRecords: List<any>);
    _getLocalNames(records: List<ProtoRecord>): List<string>;
    _getChangeNames(_localNames: List<string>): List<string>;
    _getFieldNames(_localNames: List<string>): List<string>;
    _getPipeNames(_localNames: List<string>): List<string>;
    generate(): Function;
    _genGetDirectiveFieldNames(): List<string>;
    _genGetDetectorFieldNames(): List<string>;
    _genGetDirective(d: DirectiveIndex): string;
    _genGetDetector(d: DirectiveIndex): string;
    _getNonNullPipeNames(): List<string>;
    _genFieldDefinitions(): string;
    _genHydrateDirectives(): string;
    _genHydrateDetectors(): string;
    _genPipeOnDestroy(): string;
    _genCallOnAllChangesDoneBody(): string;
    _genLocalDefinitions(): string;
    _genChangeDefinitions(): string;
    _genRecord(r: ProtoRecord): string;
    _genDirectiveLifecycle(r: ProtoRecord): string;
    _genPipeCheck(r: ProtoRecord): string;
    _genReferenceCheck(r: ProtoRecord): string;
    _genUpdateCurrentValue(r: ProtoRecord): string;
    _genInterpolation(r: ProtoRecord): string;
    _genUpdateDirectiveOrElement(r: ProtoRecord): string;
    _genThrowOnChangeCheck(oldValue: string, newValue: string): string;
    _genAddToChanges(r: ProtoRecord): string;
    _maybeGenLastInDirective(r: ProtoRecord): string;
    _genOnCheck(r: ProtoRecord): string;
    _genOnInit(r: ProtoRecord): string;
    _genOnChange(r: ProtoRecord): string;
    _genNotifyOnPushDetectors(r: ProtoRecord): string;
}
