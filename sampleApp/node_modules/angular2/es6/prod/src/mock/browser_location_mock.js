var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
    switch (arguments.length) {
        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
    }
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { proxy, SpyObject } from 'angular2/test_lib';
import { IMPLEMENTS, BaseException } from 'angular2/src/facade/lang';
import { EventEmitter, ObservableWrapper } from 'angular2/src/facade/async';
import { ListWrapper } from 'angular2/src/facade/collection';
import { BrowserLocation } from 'angular2/src/router/browser_location';
export let DummyBrowserLocation = class extends SpyObject {
    constructor() {
        super();
        this.internalBaseHref = '/';
        this.internalPath = '/';
        this.internalTitle = '';
        this.urlChanges = ListWrapper.create();
        this._subject = new EventEmitter();
    }
    simulatePopState(url) {
        this.internalPath = url;
        ObservableWrapper.callNext(this._subject, null);
    }
    path() { return this.internalPath; }
    simulateUrlPop(pathname) {
        ObservableWrapper.callNext(this._subject, { 'url': pathname });
    }
    pushState(ctx, title, url) {
        this.internalTitle = title;
        this.internalPath = url;
        ListWrapper.push(this.urlChanges, url);
    }
    forward() { throw new BaseException('Not implemented yet!'); }
    back() { throw new BaseException('Not implemented yet!'); }
    onPopState(fn) { ObservableWrapper.subscribe(this._subject, fn); }
    getBaseHref() { return this.internalBaseHref; }
    noSuchMethod(m) { return super.noSuchMethod(m); }
};
DummyBrowserLocation = __decorate([
    proxy,
    IMPLEMENTS(BrowserLocation), 
    __metadata('design:paramtypes', [])
], DummyBrowserLocation);
//# sourceMappingURL=browser_location_mock.js.map