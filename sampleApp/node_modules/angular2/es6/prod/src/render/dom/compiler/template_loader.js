var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
    switch (arguments.length) {
        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
    }
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { Injectable } from 'angular2/di';
import { isBlank, isPresent, BaseException } from 'angular2/src/facade/lang';
import { MapWrapper, ListWrapper } from 'angular2/src/facade/collection';
import { PromiseWrapper } from 'angular2/src/facade/async';
import { DOM } from 'angular2/src/dom/dom_adapter';
import { XHR } from 'angular2/src/render/xhr';
import { UrlResolver } from 'angular2/src/services/url_resolver';
/**
 * Strategy to load component templates.
 * TODO: Make public API once we are more confident in this approach.
 */
export let TemplateLoader = class {
    constructor(_xhr, urlResolver) {
        this._xhr = _xhr;
        this._cache = MapWrapper.create();
    }
    load(view) {
        let html;
        let fetchedStyles;
        // Load the HTML
        if (isPresent(view.template)) {
            html = PromiseWrapper.resolve(view.template);
        }
        else if (isPresent(view.templateAbsUrl)) {
            html = this._loadText(view.templateAbsUrl);
        }
        else {
            throw new BaseException('View should have either the templateUrl or template property set');
        }
        // Load the styles
        if (isPresent(view.styleAbsUrls) && view.styleAbsUrls.length > 0) {
            fetchedStyles = ListWrapper.map(view.styleAbsUrls, url => this._loadText(url));
        }
        else {
            fetchedStyles = [];
        }
        // Inline the styles and return a template element
        return PromiseWrapper.all(ListWrapper.concat([html], fetchedStyles))
            .then((res) => {
            let html = res[0];
            let fetchedStyles = ListWrapper.slice(res, 1);
            html = _createStyleTags(view.styles) + _createStyleTags(fetchedStyles) + html;
            return DOM.createTemplate(html);
        });
    }
    _loadText(url) {
        var response = MapWrapper.get(this._cache, url);
        if (isBlank(response)) {
            // TODO(vicb): change error when TS gets fixed
            // https://github.com/angular/angular/issues/2280
            // throw new BaseException(`Failed to fetch url "${url}"`);
            response = PromiseWrapper.catchError(this._xhr.get(url), _ => PromiseWrapper.reject(new BaseException(`Failed to fetch url "${url}"`), null));
            MapWrapper.set(this._cache, url, response);
        }
        return response;
    }
};
TemplateLoader = __decorate([
    Injectable(), 
    __metadata('design:paramtypes', [XHR, UrlResolver])
], TemplateLoader);
function _createStyleTags(styles) {
    return isBlank(styles) ?
        '' :
        ListWrapper.map(styles, css => `<style type='text/css'>${css}</style>`).join('');
}
//# sourceMappingURL=template_loader.js.map