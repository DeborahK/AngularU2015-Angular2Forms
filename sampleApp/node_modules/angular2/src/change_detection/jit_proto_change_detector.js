var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var collection_1 = require('angular2/src/facade/collection');
var interfaces_1 = require('./interfaces');
var change_detection_jit_generator_1 = require('./change_detection_jit_generator');
var coalesce_1 = require('./coalesce');
var proto_change_detector_1 = require('./proto_change_detector');
var _jitProtoChangeDetectorClassCounter = 0;
var JitProtoChangeDetector = (function (_super) {
    __extends(JitProtoChangeDetector, _super);
    function JitProtoChangeDetector(_pipeRegistry, definition) {
        _super.call(this);
        this._pipeRegistry = _pipeRegistry;
        this.definition = definition;
        this._factory = this._createFactory(definition);
    }
    JitProtoChangeDetector.isSupported = function () { return true; };
    JitProtoChangeDetector.prototype.instantiate = function (dispatcher) {
        return this._factory(dispatcher, this._pipeRegistry);
    };
    JitProtoChangeDetector.prototype._createFactory = function (definition) {
        var recordBuilder = new proto_change_detector_1.ProtoRecordBuilder();
        collection_1.ListWrapper.forEach(definition.bindingRecords, function (b) { recordBuilder.add(b, definition.variableNames); });
        var c = _jitProtoChangeDetectorClassCounter++;
        var records = coalesce_1.coalesce(recordBuilder.records);
        var typeName = "ChangeDetector" + c;
        return new change_detection_jit_generator_1.ChangeDetectorJITGenerator(typeName, definition.strategy, records, this.definition.directiveRecords)
            .generate();
    };
    return JitProtoChangeDetector;
})(interfaces_1.ProtoChangeDetector);
exports.JitProtoChangeDetector = JitProtoChangeDetector;
exports.__esModule = true;
//# sourceMappingURL=jit_proto_change_detector.js.map