var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
    switch (arguments.length) {
        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
    }
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var angular2_1 = require('angular2/angular2');
var ng_control_1 = require('./ng_control');
var shared_1 = require('./shared');
/**
 * The accessor for writing a value and listening to changes on a checkbox input element.
 *
 *  # Example
 *  ```
 *  <input type="checkbox" [ng-control]="rememberLogin">
 *  ```
 *
 * @exportedAs angular2/forms
 */
var CheckboxControlValueAccessor = (function () {
    function CheckboxControlValueAccessor(cd, renderer, elementRef) {
        this.cd = cd;
        this.renderer = renderer;
        this.elementRef = elementRef;
        this.onChange = function (_) { };
        this.onTouched = function (_) { };
        cd.valueAccessor = this;
    }
    CheckboxControlValueAccessor.prototype.writeValue = function (value) {
        // both this.checked and setProperty are required at the moment
        // remove when a proper imperative API is provided
        this.checked = value;
        shared_1.setProperty(this.renderer, this.elementRef, "checked", value);
    };
    CheckboxControlValueAccessor.prototype.registerOnChange = function (fn) { this.onChange = fn; };
    CheckboxControlValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };
    CheckboxControlValueAccessor = __decorate([
        angular2_1.Directive({
            selector: 'input[type=checkbox][ng-control],input[type=checkbox][ng-form-control],input[type=checkbox][ng-model]',
            host: {
                '(change)': 'onChange($event.target.checked)',
                '(blur)': 'onTouched()',
                '[checked]': 'checked',
                '[class.ng-untouched]': 'cd.control?.untouched == true',
                '[class.ng-touched]': 'cd.control?.touched == true',
                '[class.ng-pristine]': 'cd.control?.pristine == true',
                '[class.ng-dirty]': 'cd.control?.dirty == true',
                '[class.ng-valid]': 'cd.control?.valid == true',
                '[class.ng-invalid]': 'cd.control?.valid == false'
            }
        }), 
        __metadata('design:paramtypes', [ng_control_1.NgControl, angular2_1.Renderer, angular2_1.ElementRef])
    ], CheckboxControlValueAccessor);
    return CheckboxControlValueAccessor;
})();
exports.CheckboxControlValueAccessor = CheckboxControlValueAccessor;
exports.__esModule = true;
//# sourceMappingURL=checkbox_value_accessor.js.map