var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") return Reflect.decorate(decorators, target, key, desc);
    switch (arguments.length) {
        case 2: return decorators.reduceRight(function(o, d) { return (d && d(o)) || o; }, target);
        case 3: return decorators.reduceRight(function(o, d) { return (d && d(target, key)), void 0; }, void 0);
        case 4: return decorators.reduceRight(function(o, d) { return (d && d(target, key, o)) || o; }, desc);
    }
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var angular2_1 = require('angular2/angular2');
var ng_control_1 = require('./ng_control');
var shared_1 = require('./shared');
/**
 * Marks <option> as dynamic, so Angular can be notified when options change.
 *
 * #Example:
 * ```
 * <select ng-control="city">
 *   <option *ng-for="#c of cities" [value]="c"></option>
 * </select>
 * ``
 * @exportedAs angular2/forms
 */
var NgSelectOption = (function () {
    function NgSelectOption() {
    }
    NgSelectOption = __decorate([
        angular2_1.Directive({ selector: 'option' }), 
        __metadata('design:paramtypes', [])
    ], NgSelectOption);
    return NgSelectOption;
})();
exports.NgSelectOption = NgSelectOption;
/**
 * The accessor for writing a value and listening to changes on a select element.
 *
 * @exportedAs angular2/forms
 */
var SelectControlValueAccessor = (function () {
    function SelectControlValueAccessor(cd, renderer, elementRef, query) {
        this.cd = cd;
        this.renderer = renderer;
        this.elementRef = elementRef;
        this.value = '';
        this.onChange = function (_) { };
        this.onTouched = function (_) { };
        cd.valueAccessor = this;
        this._updateValueWhenListOfOptionsChanges(query);
    }
    SelectControlValueAccessor.prototype.writeValue = function (value) {
        // both this.value and setProperty are required at the moment
        // remove when a proper imperative API is provided
        this.value = value;
        shared_1.setProperty(this.renderer, this.elementRef, "value", value);
    };
    SelectControlValueAccessor.prototype.registerOnChange = function (fn) { this.onChange = fn; };
    SelectControlValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };
    SelectControlValueAccessor.prototype._updateValueWhenListOfOptionsChanges = function (query) {
        var _this = this;
        query.onChange(function () { return _this.writeValue(_this.value); });
    };
    SelectControlValueAccessor = __decorate([
        angular2_1.Directive({
            selector: 'select[ng-control],select[ng-form-control],select[ng-model]',
            host: {
                '(change)': 'onChange($event.target.value)',
                '(input)': 'onChange($event.target.value)',
                '(blur)': 'onTouched()',
                '[value]': 'value',
                '[class.ng-untouched]': 'cd.control?.untouched == true',
                '[class.ng-touched]': 'cd.control?.touched == true',
                '[class.ng-pristine]': 'cd.control?.pristine == true',
                '[class.ng-dirty]': 'cd.control?.dirty == true',
                '[class.ng-valid]': 'cd.control?.valid == true',
                '[class.ng-invalid]': 'cd.control?.valid == false'
            }
        }),
        __param(3, angular2_1.Query(NgSelectOption, { descendants: true })), 
        __metadata('design:paramtypes', [ng_control_1.NgControl, angular2_1.Renderer, angular2_1.ElementRef, angular2_1.QueryList])
    ], SelectControlValueAccessor);
    return SelectControlValueAccessor;
})();
exports.SelectControlValueAccessor = SelectControlValueAccessor;
exports.__esModule = true;
//# sourceMappingURL=select_control_value_accessor.js.map