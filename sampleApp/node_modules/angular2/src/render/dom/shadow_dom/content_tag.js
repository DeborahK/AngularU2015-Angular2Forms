var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var dom_adapter_1 = require('angular2/src/dom/dom_adapter');
var lang_1 = require('angular2/src/facade/lang');
var ContentStrategy = (function () {
    function ContentStrategy() {
    }
    ContentStrategy.prototype.insert = function (nodes) { };
    return ContentStrategy;
})();
/**
 * An implementation of the content tag that is used by transcluding components.
 * It is used when the content tag is not a direct child of another component,
 * and thus does not affect redistribution.
 */
var RenderedContent = (function (_super) {
    __extends(RenderedContent, _super);
    function RenderedContent(contentEl) {
        _super.call(this);
        this.beginScript = contentEl;
        this.nodes = [];
    }
    // Inserts the nodes in between the start and end scripts.
    // Previous content is removed.
    RenderedContent.prototype.insert = function (nodes) {
        this.nodes = nodes;
        if (lang_1.isBlank(this.endScript)) {
            // On first invocation, we need to create the end marker
            this.endScript = dom_adapter_1.DOM.createScriptTag('type', 'ng/contentEnd');
            dom_adapter_1.DOM.insertAfter(this.beginScript, this.endScript);
        }
        else {
            // On subsequent invocations, only remove all the nodes between the start end end markers
            this._removeNodes();
        }
        dom_adapter_1.DOM.insertAllBefore(this.endScript, nodes);
    };
    RenderedContent.prototype._removeNodes = function () {
        for (var node = dom_adapter_1.DOM.nextSibling(this.beginScript); node !== this.endScript; node = dom_adapter_1.DOM.nextSibling(this.beginScript)) {
            dom_adapter_1.DOM.remove(node);
        }
    };
    return RenderedContent;
})(ContentStrategy);
/**
 * An implementation of the content tag that is used by transcluding components.
 * It is used when the content tag is a direct child of another component,
 * and thus does not get rendered but only affect the distribution of its parent component.
 */
var IntermediateContent = (function (_super) {
    __extends(IntermediateContent, _super);
    function IntermediateContent(destinationLightDom) {
        _super.call(this);
        this.destinationLightDom = destinationLightDom;
        this.nodes = [];
    }
    IntermediateContent.prototype.insert = function (nodes) {
        this.nodes = nodes;
        this.destinationLightDom.redistribute();
    };
    return IntermediateContent;
})(ContentStrategy);
var Content = (function () {
    function Content(contentStartElement, select) {
        this.contentStartElement = contentStartElement;
        this.select = select;
        this._strategy = null;
    }
    Content.prototype.init = function (destinationLightDom) {
        this._strategy = lang_1.isPresent(destinationLightDom) ? new IntermediateContent(destinationLightDom) :
            new RenderedContent(this.contentStartElement);
    };
    Content.prototype.nodes = function () { return this._strategy.nodes; };
    Content.prototype.insert = function (nodes) { this._strategy.insert(nodes); };
    return Content;
})();
exports.Content = Content;
exports.__esModule = true;
//# sourceMappingURL=content_tag.js.map