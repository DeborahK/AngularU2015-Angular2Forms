var lang_1 = require('angular2/src/facade/lang');
var collection_1 = require('angular2/src/facade/collection');
var dom_adapter_1 = require('angular2/src/dom/dom_adapter');
var util_1 = require('../util');
var reflection_1 = require('angular2/src/reflection/reflection');
var STYLE_SEPARATOR = '.';
var ATTRIBUTE_PREFIX = 'attr.';
var CLASS_PREFIX = 'class.';
var STYLE_PREFIX = 'style.';
var PropertySetterFactory = (function () {
    function PropertySetterFactory() {
        this._lazyPropertySettersCache = collection_1.StringMapWrapper.create();
        this._eagerPropertySettersCache = collection_1.StringMapWrapper.create();
        this._innerHTMLSetterCache = function (el, value) { return dom_adapter_1.DOM.setInnerHTML(el, value); };
        this._attributeSettersCache = collection_1.StringMapWrapper.create();
        this._classSettersCache = collection_1.StringMapWrapper.create();
        this._styleSettersCache = collection_1.StringMapWrapper.create();
    }
    PropertySetterFactory._noopSetter = function (el, value) { };
    PropertySetterFactory.prototype.createSetter = function (protoElement, isNgComponent, property) {
        var setterFn, styleParts, styleSuffix;
        if (lang_1.StringWrapper.startsWith(property, ATTRIBUTE_PREFIX)) {
            setterFn =
                this._attributeSetterFactory(lang_1.StringWrapper.substring(property, ATTRIBUTE_PREFIX.length));
        }
        else if (lang_1.StringWrapper.startsWith(property, CLASS_PREFIX)) {
            setterFn = this._classSetterFactory(lang_1.StringWrapper.substring(property, CLASS_PREFIX.length));
        }
        else if (lang_1.StringWrapper.startsWith(property, STYLE_PREFIX)) {
            styleParts = property.split(STYLE_SEPARATOR);
            styleSuffix = styleParts.length > 2 ? collection_1.ListWrapper.get(styleParts, 2) : '';
            setterFn = this._styleSetterFactory(collection_1.ListWrapper.get(styleParts, 1), styleSuffix);
        }
        else if (lang_1.StringWrapper.equals(property, 'innerHtml')) {
            setterFn = this._innerHTMLSetterCache;
        }
        else {
            property = this._resolvePropertyName(property);
            setterFn = this._propertySetterFactory(protoElement, isNgComponent, property);
        }
        return setterFn;
    };
    PropertySetterFactory.prototype._propertySetterFactory = function (protoElement, isNgComponent, property) {
        var setterFn;
        var tagName = dom_adapter_1.DOM.tagName(protoElement);
        var possibleCustomElement = tagName.indexOf('-') !== -1;
        if (possibleCustomElement && !isNgComponent) {
            // need to use late check to be able to set properties on custom elements
            setterFn = collection_1.StringMapWrapper.get(this._lazyPropertySettersCache, property);
            if (lang_1.isBlank(setterFn)) {
                var propertySetterFn = reflection_1.reflector.setter(property);
                setterFn = function (receiver, value) {
                    if (dom_adapter_1.DOM.hasProperty(receiver, property)) {
                        return propertySetterFn(receiver, value);
                    }
                };
                collection_1.StringMapWrapper.set(this._lazyPropertySettersCache, property, setterFn);
            }
        }
        else {
            setterFn = collection_1.StringMapWrapper.get(this._eagerPropertySettersCache, property);
            if (lang_1.isBlank(setterFn)) {
                if (dom_adapter_1.DOM.hasProperty(protoElement, property)) {
                    setterFn = reflection_1.reflector.setter(property);
                }
                else {
                    setterFn = PropertySetterFactory._noopSetter;
                }
                collection_1.StringMapWrapper.set(this._eagerPropertySettersCache, property, setterFn);
            }
        }
        return setterFn;
    };
    PropertySetterFactory.prototype._isValidAttributeValue = function (attrName, value) {
        if (attrName == "role") {
            return lang_1.isString(value);
        }
        else {
            return lang_1.isPresent(value);
        }
    };
    PropertySetterFactory.prototype._attributeSetterFactory = function (attrName) {
        var _this = this;
        var setterFn = collection_1.StringMapWrapper.get(this._attributeSettersCache, attrName);
        var dashCasedAttributeName;
        if (lang_1.isBlank(setterFn)) {
            dashCasedAttributeName = util_1.camelCaseToDashCase(attrName);
            setterFn = function (element, value) {
                if (_this._isValidAttributeValue(dashCasedAttributeName, value)) {
                    dom_adapter_1.DOM.setAttribute(element, dashCasedAttributeName, lang_1.stringify(value));
                }
                else {
                    if (lang_1.isPresent(value)) {
                        throw new lang_1.BaseException("Invalid " + dashCasedAttributeName +
                            " attribute, only string values are allowed, got '" +
                            lang_1.stringify(value) + "'");
                    }
                    dom_adapter_1.DOM.removeAttribute(element, dashCasedAttributeName);
                }
            };
            collection_1.StringMapWrapper.set(this._attributeSettersCache, attrName, setterFn);
        }
        return setterFn;
    };
    PropertySetterFactory.prototype._classSetterFactory = function (className) {
        var setterFn = collection_1.StringMapWrapper.get(this._classSettersCache, className);
        var dashCasedClassName;
        if (lang_1.isBlank(setterFn)) {
            dashCasedClassName = util_1.camelCaseToDashCase(className);
            setterFn = function (element, isAdd) {
                if (isAdd) {
                    dom_adapter_1.DOM.addClass(element, dashCasedClassName);
                }
                else {
                    dom_adapter_1.DOM.removeClass(element, dashCasedClassName);
                }
            };
            collection_1.StringMapWrapper.set(this._classSettersCache, className, setterFn);
        }
        return setterFn;
    };
    PropertySetterFactory.prototype._styleSetterFactory = function (styleName, styleSuffix) {
        var cacheKey = styleName + styleSuffix;
        var setterFn = collection_1.StringMapWrapper.get(this._styleSettersCache, cacheKey);
        var dashCasedStyleName;
        if (lang_1.isBlank(setterFn)) {
            dashCasedStyleName = util_1.camelCaseToDashCase(styleName);
            setterFn = function (element, value) {
                var valAsStr;
                if (lang_1.isPresent(value)) {
                    valAsStr = lang_1.stringify(value);
                    dom_adapter_1.DOM.setStyle(element, dashCasedStyleName, valAsStr + styleSuffix);
                }
                else {
                    dom_adapter_1.DOM.removeStyle(element, dashCasedStyleName);
                }
            };
            collection_1.StringMapWrapper.set(this._styleSettersCache, cacheKey, setterFn);
        }
        return setterFn;
    };
    PropertySetterFactory.prototype._resolvePropertyName = function (attrName) {
        var mappedPropName = collection_1.StringMapWrapper.get(dom_adapter_1.DOM.attrToPropMap, attrName);
        return lang_1.isPresent(mappedPropName) ? mappedPropName : attrName;
    };
    return PropertySetterFactory;
})();
exports.PropertySetterFactory = PropertySetterFactory;
exports.__esModule = true;
//# sourceMappingURL=property_setter_factory.js.map